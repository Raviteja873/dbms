-- Q-1: Fetch FIRST_NAME using alias WORKER_NAME
SELECT FIRST_NAME AS WORKER_NAME FROM Worker;

-- Q-2: Fetch FIRST_NAME in uppercase
SELECT UPPER(FIRST_NAME) FROM Worker;

-- Q-3: Fetch unique values of DEPARTMENT
SELECT DISTINCT DEPARTMENT FROM Worker;

-- Q-4: Print the first three characters of FIRST_NAME
SELECT LEFT(FIRST_NAME, 3) FROM Worker;

-- Q-5: Find the position of 'a' in 'Amitabh'
SELECT INSTR('Amitabh', 'a');

-- Q-6: Remove white spaces from the right side of FIRST_NAME
SELECT RTRIM(FIRST_NAME) FROM Worker;

-- Q-7: Remove white spaces from the left side of DEPARTMENT
SELECT LTRIM(DEPARTMENT) FROM Worker;

-- Q-8: Fetch unique DEPARTMENT values and print their length
SELECT DISTINCT DEPARTMENT, LENGTH(DEPARTMENT) FROM Worker;

-- Q-9: Replace 'a' with 'A' in FIRST_NAME
SELECT REPLACE(FIRST_NAME, 'a', 'A') FROM Worker;

-- Q-10: Print FIRST_NAME and LAST_NAME as COMPLETE_NAME
SELECT CONCAT(FIRST_NAME, ' ', LAST_NAME) AS COMPLETE_NAME FROM Worker;

-- Q-11: Print all Worker details ordered by FIRST_NAME (ascending)
SELECT * FROM Worker ORDER BY FIRST_NAME ASC;

-- Q-12: Print all Worker details ordered by FIRST_NAME (ASC) and DEPARTMENT (DESC)
SELECT * FROM Worker ORDER BY FIRST_NAME ASC, DEPARTMENT DESC;

-- Q-13: Print details for Workers with FIRST_NAME as 'Vipul' and 'Satish'
SELECT * FROM Worker WHERE FIRST_NAME IN ('Vipul', 'Satish');

-- Q-14: Print details of workers excluding FIRST_NAME 'Vipul' and 'Satish'
SELECT * FROM Worker WHERE FIRST_NAME NOT IN ('Vipul', 'Satish');

-- Q-15: Print details of Workers with DEPARTMENT as 'Admin'
SELECT * FROM Worker WHERE DEPARTMENT = 'Admin';

-- Q-16: Print details of Workers whose FIRST_NAME contains 'a'
SELECT * FROM Worker WHERE FIRST_NAME LIKE '%a%';

-- Q-17: Print details of Workers whose FIRST_NAME ends with 'a'
SELECT * FROM Worker WHERE FIRST_NAME LIKE '%a';

-- Q-18: Print details of Workers whose FIRST_NAME ends with 'h' and has six letters
SELECT * FROM Worker WHERE FIRST_NAME LIKE '_____h';

-- Q-19: Print details of Workers whose SALARY is between 100000 and 500000
SELECT * FROM Worker WHERE SALARY BETWEEN 100000 AND 500000;

-- Q-20: Print details of Workers who joined in Feb 2021
SELECT * FROM Worker WHERE MONTH(JOINING_DATE) = 2 AND YEAR(JOINING_DATE) = 2021;

-- Q-21: Count employees in DEPARTMENT 'Admin'
SELECT COUNT(*) FROM Worker WHERE DEPARTMENT = 'Admin';

-- Q-22: Fetch worker names with salaries between 50000 and 100000
SELECT FIRST_NAME, LAST_NAME FROM Worker WHERE SALARY BETWEEN 50000 AND 100000;

-- Q-23: Count workers per department in descending order
SELECT DEPARTMENT, COUNT(*) FROM Worker GROUP BY DEPARTMENT ORDER BY COUNT(*) DESC;

-- Q-24: Print details of Workers who are also Managers
SELECT * FROM Worker WHERE WORKER_ID IN (SELECT WORKER_REF_ID FROM Title WHERE WORKER_TITLE = 'Manager');

-- Q-25: Fetch duplicate records based on some fields
SELECT FIRST_NAME, LAST_NAME, COUNT(*) FROM Worker GROUP BY FIRST_NAME, LAST_NAME HAVING COUNT(*) > 1;

-- Q-26: Show only odd rows from the table
SELECT * FROM Worker WHERE MOD(WORKER_ID, 2) <> 0;

-- Q-27: Show only even rows from the table
SELECT * FROM Worker WHERE MOD(WORKER_ID, 2) = 0;

-- Q-28: Clone a new table from another table
CREATE TABLE WorkerClone AS SELECT * FROM Worker;

-- Q-29: Fetch intersecting records of two tables
SELECT * FROM Worker INNER JOIN Bonus ON Worker.WORKER_ID = Bonus.WORKER_REF_ID;

-- Q-30: Show records in Worker that are not in Bonus
SELECT * FROM Worker WHERE WORKER_ID NOT IN (SELECT WORKER_REF_ID FROM Bonus);

-- Q-31: Show the current date and time
SELECT NOW();

-- Q-32: Fetch the top 10 records
SELECT * FROM Worker LIMIT 10;

-- Q-33: Determine the 5th highest salary
SELECT DISTINCT SALARY FROM Worker ORDER BY SALARY DESC LIMIT 1 OFFSET 4;

-- Q-34: Find the 5th highest salary without TOP or LIMIT
SELECT SALARY FROM Worker W1 WHERE 5 = (SELECT COUNT(DISTINCT SALARY) FROM Worker W2 WHERE W2.SALARY >= W1.SALARY);

-- Q-35: Fetch employees with the same salary
SELECT * FROM Worker WHERE SALARY IN (SELECT SALARY FROM Worker GROUP BY SALARY HAVING COUNT(*) > 1);

-- Q-36: Show the second-highest salary
SELECT DISTINCT SALARY FROM Worker ORDER BY SALARY DESC LIMIT 1 OFFSET 1;

-- Q-37: Show one row twice in results
SELECT * FROM Worker UNION ALL SELECT * FROM Worker LIMIT 1;

-- Q-38: Fetch intersecting records of two tables (same as Q-29)
SELECT * FROM Worker INNER JOIN Bonus ON Worker.WORKER_ID = Bonus.WORKER_REF_ID;

-- Q-39: Fetch the first 50% of records
SELECT * FROM Worker WHERE WORKER_ID <= (SELECT COUNT(*) / 2 FROM Worker);

-- Q-40: Fetch departments with fewer than five employees
SELECT DEPARTMENT FROM Worker GROUP BY DEPARTMENT HAVING COUNT(*) < 5;

-- Q-41: Show all departments with the number of employees
SELECT DEPARTMENT, COUNT(*) FROM Worker GROUP BY DEPARTMENT;

-- Q-42: Show the last record
SELECT * FROM Worker ORDER BY WORKER_ID DESC LIMIT 1;

-- Q-43: Fetch the first row
SELECT * FROM Worker ORDER BY WORKER_ID ASC LIMIT 1;

-- Q-44: Fetch the last five records
SELECT * FROM Worker ORDER BY WORKER_ID DESC LIMIT 5;

-- Q-45: Print employees with the highest salary in each department
SELECT FIRST_NAME, LAST_NAME, DEPARTMENT, SALARY FROM Worker WHERE (DEPARTMENT, SALARY) IN (SELECT DEPARTMENT, MAX(SALARY) FROM Worker GROUP BY DEPARTMENT);

-- Q-46: Fetch the top three salaries
SELECT DISTINCT SALARY FROM Worker ORDER BY SALARY DESC LIMIT 3;

-- Q-47: Fetch the lowest three salaries
SELECT DISTINCT SALARY FROM Worker ORDER BY SALARY ASC LIMIT 3;

-- Q-48: Fetch nth highest salary (generalized)
SELECT DISTINCT SALARY FROM Worker ORDER BY SALARY DESC LIMIT 1 OFFSET N-1;

-- Q-49: Fetch departments with total salaries paid
SELECT DEPARTMENT, SUM(SALARY) FROM Worker GROUP BY DEPARTMENT;

-- Q-50: Fetch names of workers with the highest salary
SELECT FIRST_NAME, LAST_NAME FROM Worker WHERE SALARY = (SELECT MAX(SALARY) FROM Worker);

------------------------------------------------------------------------------------------------------------------------



Great Ravi Teja! Based on your full list of queries, here is how to **create the `Worker` table**, **insert sample values**, and then use all your SQL queries.

---

## âœ… 1. CREATE TABLE `Worker`

```sql
CREATE TABLE Worker (
    WORKER_ID     NUMBER,
    FIRST_NAME    VARCHAR2(20),
    LAST_NAME     VARCHAR2(20),
    SALARY        NUMBER,
    JOINING_DATE  DATE,
    DEPARTMENT    VARCHAR2(20)
);
```

---

## âœ… 2. INSERT Sample Values

You can copy-paste these to test all your 50 queries:

```sql
INSERT INTO Worker VALUES (1, 'Vipul', 'Sharma', 500000, TO_DATE('12-01-2021', 'DD-MM-YYYY'), 'Admin');
INSERT INTO Worker VALUES (2, 'Satish', 'Verma', 300000, TO_DATE('15-02-2021', 'DD-MM-YYYY'), 'HR');
INSERT INTO Worker VALUES (3, 'Karan', 'Singh', 100000, TO_DATE('10-03-2021', 'DD-MM-YYYY'), 'Admin');
INSERT INTO Worker VALUES (4, 'Amit', 'Gupta', 80000, TO_DATE('22-02-2021', 'DD-MM-YYYY'), 'Finance');
INSERT INTO Worker VALUES (5, 'Ravi', 'Kumar', 60000, TO_DATE('05-04-2021', 'DD-MM-YYYY'), 'IT');
INSERT INTO Worker VALUES (6, 'Teja', 'Rao', 70000, TO_DATE('18-05-2021', 'DD-MM-YYYY'), 'HR');
INSERT INTO Worker VALUES (7, 'Kumar', 'Das', 100000, TO_DATE('01-01-2021', 'DD-MM-YYYY'), 'IT');
INSERT INTO Worker VALUES (8, 'Aakash', 'Mehta', 120000, TO_DATE('28-02-2021', 'DD-MM-YYYY'), 'Admin');
```

---

## âœ… 3. Create Additional Table `Title` (for manager queries)

```sql
CREATE TABLE Title (
    WORKER_REF_ID NUMBER,
    WORKER_TITLE  VARCHAR2(20),
    AFFECTED_FROM DATE
);
```

### Insert values:

```sql
INSERT INTO Title VALUES (1, 'Manager', TO_DATE('12-01-2021', 'DD-MM-YYYY'));
INSERT INTO Title VALUES (2, 'Executive', TO_DATE('15-02-2021', 'DD-MM-YYYY'));
INSERT INTO Title VALUES (3, 'Manager', TO_DATE('10-03-2021', 'DD-MM-YYYY'));
INSERT INTO Title VALUES (4, 'Clerk', TO_DATE('22-02-2021', 'DD-MM-YYYY'));
```

---

## âœ… 4. Create Additional Table `Bonus` (for join queries)

```sql
CREATE TABLE Bonus (
    WORKER_REF_ID NUMBER,
    BONUS_AMOUNT  NUMBER,
    BONUS_DATE    DATE
);
```

### Insert values:

```sql
INSERT INTO Bonus VALUES (1, 5000, TO_DATE('31-12-2021', 'DD-MM-YYYY'));
INSERT INTO Bonus VALUES (3, 3000, TO_DATE('30-11-2021', 'DD-MM-YYYY'));
INSERT INTO Bonus VALUES (5, 2000, TO_DATE('31-10-2021', 'DD-MM-YYYY'));
```

---

## ðŸ”„ Now You Can Run All Your Queries (Q-1 to Q-50)

Your table structure fully supports:

* `JOIN`, `IN`, `LIKE`, `GROUP BY`, `ORDER BY`, `DISTINCT`
* Aggregate: `MAX`, `MIN`, `SUM`, `AVG`, `COUNT`
* String functions: `UPPER`, `LTRIM`, `REPLACE`, `INSTR`, `SUBSTR`, etc.
* Date functions like `MONTH()` and `YEAR()` (for Oracle, use `EXTRACT`)

Let me know if you want this in a `.sql` file or want to test any specific query output!

-----------cursers------------- 
DECLARE
  CURSOR emp_cursor IS SELECT NAME, SALARY FROM EMPLOYEE;
  emp_name EMPLOYEE.NAME%TYPE;
  emp_salary EMPLOYEE.SALARY%TYPE;
BEGIN
  OPEN emp_cursor;
  LOOP
    FETCH emp_cursor INTO emp_name, emp_salary;
    EXIT WHEN emp_cursor%NOTFOUND;
    DBMS_OUTPUT.PUT_LINE('Name: ' || emp_name || ' Salary: ' || emp_salary);
  END LOOP;
  CLOSE emp_cursor;
END;



DECLARE
  emp_name EMPLOYEE.NAME%TYPE;
BEGIN
  SELECT NAME INTO emp_name FROM EMPLOYEE WHERE ID = 101;
  DBMS_OUTPUT.PUT_LINE('Employee Name: ' || emp_name);
END;


